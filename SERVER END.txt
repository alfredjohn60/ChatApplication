                            SERVER END

# import socket library 
import socket 
  
# import threading library 
import threading 

# Choose a port that is free 
Port = 5000
  
# An IPv4 address is obtained 
# for the server.    
Server = socket.gethostname() 
  
# Address is stored as a tuple 
Address = (Server, Port) 
  
# the format in which encoding 
# and decoding will occur 
FORMAT = "utf-8"
  
# Lists that will contains 
# all the clients connected to  
# the server and their names. 
clients, names = [], [] 
  
# Create a new socket for 
# the server  
server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 
  
# bind the address of the  
# server to the socket  
server.bind(Address) 
  
# function to start the connection 
def startChat(): 
    print("server is working on " + Server) 
      
    # listening for connections
    server.listen() 
      
    while True: 
        
        # accept connections and returns a new connection to the client 
        #  and  the address bound to it  
        conn, addr =  server.accept() 
        conn.send("NAME".encode(FORMAT)) 
           
        name = conn.recv(1024).decode(FORMAT) 
          
        # append the name and client to the respective list 
        names.append(name) 
        clients.append(conn) 
          
        print(f"Name is :{name}") 
          
        # broadcast message 
        broadcastMessage(f"{name} has joined the chat!".encode(FORMAT)) 
          
        conn.send('Connection successful!'.encode(FORMAT)) 
          
        # Start the handle thread 
        thread = threading.Thread(target=handle,args =(conn, addr)) 
        thread.start() 
          
        # no. of clients connected  to the server
        print(f"active connections {threading.activeCount()-1}") 
  
# method to handle the  
# incoming messages  
def handle(conn, addr): 
    
    print(f"new connection {addr}") 
    
      
    while True: 
          # recieve message 
        message = conn.recv(1024) 
          
        # broadcast message 
        broadcastMessage(message) 
      
    # close the connection 
    conn.close() 
  
# method for broadcasting  
# messages to the each clients 
def broadcastMessage(message): 
    for client in clients: 
        client.send(message) 
  
# call the method to  
# begin the communication 
startChat() 
